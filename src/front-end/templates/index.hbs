<!DOCTYPE HTML>
<html lang="{{ language }}" class="{{ default_theme }} sidebar-visible" dir="{{ text_direction }}">
    <head>
        <!-- Book generated using mdBook -->
        <meta charset="UTF-8">
        <title>{{ title }}</title>
        {{#if is_print }}
        <meta name="robots" content="noindex">
        {{/if}}
        {{#if base_url}}
        <base href="{{ base_url }}">
        {{/if}}


        <!-- Custom HTML head -->
        {{> head}}

        <meta name="description" content="{{ description }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="theme-color" content="#ffffff">

        {{#if favicon_svg}}
        <link rel="icon" href="{{ resource "favicon.svg" }}">
        {{/if}}
        {{#if favicon_png}}
        <link rel="shortcut icon" href="{{ resource "favicon.png" }}">
        {{/if}}
        <link rel="stylesheet" href="{{ resource "css/variables.css" }}">
        <link rel="stylesheet" href="{{ resource "css/general.css" }}">
        <link rel="stylesheet" href="{{ resource "css/chrome.css" }}">
        {{#if print_enable}}
        <link rel="stylesheet" href="{{ resource "css/print.css" }}" media="print">
        {{/if}}

        <!-- Fonts -->
        <link rel="stylesheet" href="{{ resource "FontAwesome/css/font-awesome.css" }}">
        {{#if copy_fonts}}
        <link rel="stylesheet" href="{{ resource "fonts/fonts.css" }}">
        {{/if}}

        <!-- Highlight.js Stylesheets -->
        <link rel="stylesheet" id="highlight-css" href="{{ resource "highlight.css" }}">
        <link rel="stylesheet" id="tomorrow-night-css" href="{{ resource "tomorrow-night.css" }}">
        <link rel="stylesheet" id="ayu-highlight-css" href="{{ resource "ayu-highlight.css" }}">

        <!-- Custom theme stylesheets -->
        {{#each additional_css}}
        <link rel="stylesheet" href="{{ resource this }}">
        {{/each}}

        {{#if mathjax_support}}
        <!-- MathJax -->
        <script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
        {{/if}}

        <!-- Provide site root and default themes to javascript -->
        <script>
            const path_to_root = "{{ path_to_root }}";
            const default_light_theme = "{{ default_theme }}";
            const default_dark_theme = "{{ preferred_dark_theme }}";
        </script>
        <!-- Start loading toc.js asap -->
        <script src="{{ resource "toc.js" }}"></script>
    </head>
    <body>
    <div id="body-container">
        <input type="checkbox" id="sidebar-toggle-anchor" class="hidden">

        <script>
        //  First declare the global constants needed everywhere, outside of the function wrapper
        //  TODO refactoring: maybe all variables that are currently global could be moved to a single global object (window.mdBook) to avoid cluttering the global namespace?
        const default_theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? default_dark_theme : default_light_theme;
        const html = document.documentElement;
        const sidebar_toggle = document.getElementById("sidebar-toggle-anchor");


        //  Global “namespace” object to keep some of our helper functions and utils
        const mdBook = {
            getConfig(key, storage = localStorage) {
                const fullKey = "mdbook-" + key;
                try {
                    return storage.getItem(fullKey);
                } catch(e) {
                    //  It can only be a security exception (if the user has disabled cookies/storage)
                    //  TODO: we could warn the user that we won’t be able to persist their settings, but maybe it would be better to do it only if/when they try to change them? (ie when they try to hide or show the sidebar, or change the theme)
                    return null;
                }
            },

            setConfig(key, value, storage = localStorage) {
                const fullKey = 'mdbook-' + key;
                try {
                    storage.setItem(fullKey, value);
                } catch (e) {
                    // Ignore error.
                    //  It can only be a security exception (if the user has disabled cookies/storage)
                    //  TODO: maybe display some warning to the user that the setting they are trying
                    //      to change will not be kept across page changes/reloads because they disabled
                    //      storage for this site/origin?
                }
            },
        };


        (function(){

            //  Set the theme before any content is loaded, prevents flash

            let theme = mdBook.getConfig('theme');
            //  Work around some values being stored in localStorage wrapped in quotes
            //  Probably for legacy reasons?
            if(theme && theme.startsWith('"')) {
                theme = theme.replace(/^"|"$/g, "");
                mdBook.setConfig('theme', theme);
            }
            theme = theme ?? default_theme;

            html.classList.remove('{{ default_theme }}')
            html.classList.add(theme);
            html.classList.add("js");

            //  Hide / unhide sidebar before it is displayed, and restore its width if it was manually resized

            let sidebar = mdBook.getConfig("sidebar", sessionStorage);
            if(!sidebar) {
                //  No value, this must be the first time this page is open.
                //  By default, show or hide the sidebar depending on the window width.
                sidebar = (document.body.clientWidth >= 1080) ? "visible" : "hidden";
                //  Then we need to *store* the visibility of the sidebar, because without that, if the user resized the window then navigated to another page, the sidebar visibility could change unexpectedly
                mdBook.setConfig('sidebar', sidebar, sessionStorage);
            }

            sidebar_toggle.checked = sidebar === 'visible';
            html.classList.remove('sidebar-visible');
            html.classList.add("sidebar-" + sidebar);

            //  We need parseInt() because storage only stores strings
            let sidebarWidth = parseInt(mdBook.getConfig("sidebarWidth", sessionStorage), 10);
            if(sidebarWidth && Number.isFinite(sidebarWidth)) {
                document.documentElement.style.setProperty('--sidebar-width', Math.min(sidebarWidth, window.innerWidth - 100) + 'px');
            }

        })();</script>

        <nav id="sidebar" class="sidebar" aria-label="Table of contents">
            <!-- populated by js -->
            <mdbook-sidebar-scrollbox class="sidebar-scrollbox"></mdbook-sidebar-scrollbox>
            <noscript>
                <iframe class="sidebar-iframe-outer" src="{{ path_to_root }}toc.html"></iframe>
            </noscript>
            <div id="sidebar-resize-handle" class="sidebar-resize-handle">
                <div class="sidebar-resize-indicator"></div>
            </div>
        </nav>

        <div id="page-wrapper" class="page-wrapper">

            <div class="page">
                {{> header}}
                <div id="menu-bar-hover-placeholder"></div>
                <div id="menu-bar" class="menu-bar sticky">
                    <div class="left-buttons">
                        <label id="sidebar-toggle" class="icon-button" for="sidebar-toggle-anchor" title="Toggle Table of Contents" aria-label="Toggle Table of Contents" aria-controls="sidebar">
                            <i class="fa fa-bars"></i>
                        </label>
                        <button id="theme-toggle" class="icon-button" type="button" title="Change theme" aria-label="Change theme" aria-haspopup="true" aria-expanded="false" aria-controls="theme-list">
                            <i class="fa fa-paint-brush"></i>
                        </button>
                        <ul id="theme-list" class="theme-popup" aria-label="Themes" role="menu">
                            <li role="none"><button role="menuitem" class="theme" id="default_theme">Auto</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="light">Light</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="rust">Rust</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="coal">Coal</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="navy">Navy</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="ayu">Ayu</button></li>
                        </ul>
                        {{#if search_enabled}}
                        <button id="search-toggle" class="icon-button" type="button" title="Search. (Shortkey: s)" aria-label="Toggle Searchbar" aria-expanded="false" aria-keyshortcuts="S" aria-controls="searchbar">
                            <i class="fa fa-search"></i>
                        </button>
                        {{/if}}
                    </div>

                    <h1 class="menu-title">{{ book_title }}</h1>

                    <div class="right-buttons">
                        {{#if print_enable}}
                        <a href="{{ path_to_root }}print.html" title="Print this book" aria-label="Print this book">
                            <i id="print-button" class="fa fa-print"></i>
                        </a>
                        {{/if}}
                        {{#if git_repository_url}}
                        <a href="{{git_repository_url}}" title="Git repository" aria-label="Git repository">
                            <i id="git-repository-button" class="fa {{git_repository_icon}}"></i>
                        </a>
                        {{/if}}
                        {{#if git_repository_edit_url}}
                        <a href="{{git_repository_edit_url}}" title="Suggest an edit" aria-label="Suggest an edit">
                            <i id="git-edit-button" class="fa fa-edit"></i>
                        </a>
                        {{/if}}

                    </div>
                </div>

                {{#if search_enabled}}
                <div id="search-wrapper" class="hidden">
                    <form id="searchbar-outer" class="searchbar-outer">
                        <input type="search" id="searchbar" name="searchbar" placeholder="Search this book ..." aria-controls="searchresults-outer" aria-describedby="searchresults-header">
                    </form>
                    <div id="searchresults-outer" class="searchresults-outer hidden">
                        <div id="searchresults-header" class="searchresults-header"></div>
                        <ul id="searchresults">
                        </ul>
                    </div>
                </div>
                {{/if}}

                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->
                <script>
                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');
                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');
                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {
                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);
                    });
                </script>

                <div id="content" class="content">
                    <main>
                        {{{ content }}}
                    </main>

                    <nav class="nav-wrapper" aria-label="Page navigation">
                        <!-- Mobile navigation buttons -->
                        {{#previous}}
                            <a rel="prev" href="{{ path_to_root }}{{link}}" class="mobile-nav-chapters previous" title="Previous chapter" aria-label="Previous chapter" aria-keyshortcuts="Left">
                                <i class="fa fa-angle-left"></i>
                            </a>
                        {{/previous}}

                        {{#next}}
                            <a rel="next prefetch" href="{{ path_to_root }}{{link}}" class="mobile-nav-chapters next" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                                <i class="fa fa-angle-right"></i>
                            </a>
                        {{/next}}

                        <div style="clear: both"></div>
                    </nav>
                </div>
            </div>

            <nav class="nav-wide-wrapper" aria-label="Page navigation">
                {{#previous}}
                    <a rel="prev" href="{{ path_to_root }}{{link}}" class="nav-chapters previous" title="Previous chapter" aria-label="Previous chapter" aria-keyshortcuts="Left">
                        <i class="fa fa-angle-left"></i>
                    </a>
                {{/previous}}

                {{#next}}
                    <a rel="next prefetch" href="{{ path_to_root }}{{link}}" class="nav-chapters next" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                        <i class="fa fa-angle-right"></i>
                    </a>
                {{/next}}
            </nav>

        </div>

        {{#if live_reload_endpoint}}
        <!-- Livereload script (if served using the cli tool) -->
        <script>
            const wsProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsAddress = wsProtocol + "//" + location.host + "/" + "{{{live_reload_endpoint}}}";
            const socket = new WebSocket(wsAddress);
            socket.onmessage = function (event) {
                if (event.data === "reload") {
                    socket.close();
                    location.reload();
                }
            };

            window.onbeforeunload = function() {
                socket.close();
            }
        </script>
        {{/if}}

        {{#if google_analytics}}
        <!-- Google Analytics Tag -->
        <script>
            const localAddrs = ["localhost", "127.0.0.1", ""];

            // make sure we don't activate google analytics if the developer is
            // inspecting the book locally...
            if (localAddrs.indexOf(document.location.hostname) === -1) {
                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

                ga('create', '{{google_analytics}}', 'auto');
                ga('send', 'pageview');
            }
        </script>
        {{/if}}

        {{#if playground_line_numbers}}
        <script>
            window.playground_line_numbers = true;
        </script>
        {{/if}}

        {{#if playground_copyable}}
        <script>
            window.playground_copyable = true;
        </script>
        {{/if}}

        {{#if playground_js}}
        <script src="{{ resource "ace.js" }}"></script>
        <script src="{{ resource "editor.js" }}"></script>
        <script src="{{ resource "mode-rust.js" }}"></script>
        <script src="{{ resource "theme-dawn.js" }}"></script>
        <script src="{{ resource "theme-tomorrow_night.js" }}"></script>
        {{/if}}

        {{#if search_js}}
        <script src="{{ resource "elasticlunr.min.js" }}"></script>
        <script src="{{ resource "mark.min.js" }}"></script>
        <script src="{{ resource "searcher.js" }}"></script>
        {{/if}}

        <script src="{{ resource "clipboard.min.js" }}"></script>
        <script src="{{ resource "highlight.js" }}"></script>
        <script src="{{ resource "book.js" }}"></script>

        <!-- Custom JS scripts -->
        {{#each additional_js}}
        <script src="{{ resource this}}"></script>
        {{/each}}

        {{#if is_print}}
        {{#if mathjax_support}}
        <script>
        window.addEventListener('load', function() {
            MathJax.Hub.Register.StartupHook('End', function() {
                window.setTimeout(window.print, 100);
            });
        });
        </script>
        {{else}}
        <script>
        window.addEventListener('load', function() {
            window.setTimeout(window.print, 100);
        });
        </script>
        {{/if}}
        {{/if}}

    </div>
    </body>
</html>
